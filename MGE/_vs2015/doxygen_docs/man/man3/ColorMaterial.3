.TH "ColorMaterial" 3 "Mon Jan 1 2018" "MGE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ColorMaterial
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ColorMaterial\&.hpp>\fP
.PP
Inherits \fBAbstractMaterial\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBColorMaterial\fP (glm::vec3 pColor=glm::vec3(1, 0, 0))"
.br
.ti -1c
.RI "virtual \fB~ColorMaterial\fP ()"
.br
.ti -1c
.RI "virtual void \fBrender\fP (\fBWorld\fP *pWorld, \fBMesh\fP *pMesh, const glm::mat4 &pModelMatrix, const glm::mat4 &pViewMatrix, const glm::mat4 &pProjectionMatrix) override"
.br
.ti -1c
.RI "void \fBsetDiffuseColor\fP (glm::vec3 pDiffuseColor)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is about the simplest material we can come up with, it demonstrates how to render a single color material without caching, passing in all the matrices we require separately\&. 
.PP
Definition at line 13 of file ColorMaterial\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ColorMaterial::ColorMaterial (glm::vec3 pColor = \fCglm::vec3(1,0,0)\fP)"

.PP
Definition at line 11 of file ColorMaterial\&.cpp\&.
.SS "ColorMaterial::~ColorMaterial ()\fC [virtual]\fP"

.PP
Definition at line 27 of file ColorMaterial\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void ColorMaterial::render (\fBWorld\fP * pWorld, \fBMesh\fP * pMesh, const glm::mat4 & pModelMatrix, const glm::mat4 & pViewMatrix, const glm::mat4 & pPerspectiveMatrix)\fC [override]\fP, \fC [virtual]\fP"
Render the given mesh in the given world using the given mvp matrices\&. Implement in subclass\&. 
.PP
Implements \fBAbstractMaterial\fP\&.
.PP
Definition at line 36 of file ColorMaterial\&.cpp\&.
.SS "void ColorMaterial::setDiffuseColor (glm::vec3 pDiffuseColor)"

.PP
Definition at line 32 of file ColorMaterial\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MGE from the source code\&.
