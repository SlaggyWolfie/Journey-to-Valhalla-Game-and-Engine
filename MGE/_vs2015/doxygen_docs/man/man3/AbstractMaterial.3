.TH "AbstractMaterial" 3 "Mon Jan 1 2018" "MGE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AbstractMaterial
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AbstractMaterial\&.hpp>\fP
.PP
Inherited by \fBColorMaterial\fP, and \fBTextureMaterial\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAbstractMaterial\fP ()"
.br
.ti -1c
.RI "virtual \fB~AbstractMaterial\fP ()"
.br
.ti -1c
.RI "virtual void \fBrender\fP (\fBWorld\fP *pWorld, \fBMesh\fP *pMesh, const glm::mat4 &pModelMatrix, const glm::mat4 &pViewMatrix, const glm::mat4 &pPerspectiveMatrix)=0"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBAbstractMaterial\fP should be subclassed for all materials, for example \fBColorMaterial\fP, \fBTextureMaterial\fP\&.
.PP
Basically a material is responsible for setting up the correct shader, filling all the correct parameters and actually rendering a mesh by streaming all mesh data through a specific shader\&. Subclasses often use a static shader variable which is initialized once upon first use, but that is fully optional (!)\&.
.PP
This works like the Unity Material, where you have to select a shader for a material and the shader chosen determines which properties actually become available for the material itself\&. 
.PP
Definition at line 20 of file AbstractMaterial\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AbstractMaterial::AbstractMaterial ()"

.PP
Definition at line 3 of file AbstractMaterial\&.cpp\&.
.SS "AbstractMaterial::~AbstractMaterial ()\fC [virtual]\fP"

.PP
Definition at line 8 of file AbstractMaterial\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual void AbstractMaterial::render (\fBWorld\fP * pWorld, \fBMesh\fP * pMesh, const glm::mat4 & pModelMatrix, const glm::mat4 & pViewMatrix, const glm::mat4 & pPerspectiveMatrix)\fC [pure virtual]\fP"
Render the given mesh in the given world using the given mvp matrices\&. Implement in subclass\&. 
.PP
Implemented in \fBTextureMaterial\fP, and \fBColorMaterial\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MGE from the source code\&.
