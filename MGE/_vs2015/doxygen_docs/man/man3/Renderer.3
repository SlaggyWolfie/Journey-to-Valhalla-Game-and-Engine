.TH "Renderer" 3 "Mon Jan 1 2018" "MGE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Renderer
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Renderer\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRenderer\fP ()"
.br
.ti -1c
.RI "virtual \fB~Renderer\fP ()"
.br
.ti -1c
.RI "void \fBsetClearColor\fP (GLbyte pR, GLbyte pG, GLbyte pB)"
.br
.ti -1c
.RI "void \fBrender\fP (\fBWorld\fP *pWorld)"
.br
.ti -1c
.RI "void \fBrender\fP (\fBWorld\fP *pWorld, \fBGameObject\fP *pGameObject, \fBAbstractMaterial\fP *pMaterial, \fBCamera\fP *pCamera, bool pRecursive)"
.br
.ti -1c
.RI "void \fBrender\fP (\fBWorld\fP *pWorld, \fBGameObject\fP *pGameObject, \fBAbstractMaterial\fP *pMaterial, const glm::mat4 &pModelMatrix, const glm::mat4 &pViewMatrix, const glm::mat4 &pProjectionMatrix, bool pRecursive)"
.br
.ti -1c
.RI "void \fBrender\fP (\fBWorld\fP *pWorld, \fBMesh\fP *pMesh, \fBAbstractMaterial\fP *pMaterial, const glm::mat4 &pModelMatrix, const glm::mat4 &pViewMatrix, const glm::mat4 &pProjectionMatrix)"
.br
.ti -1c
.RI "void \fBrenderMeshDebugInfo\fP (\fBMesh\fP *pMesh, const glm::mat4 &pModelMatrix, const glm::mat4 &pViewMatrix, const glm::mat4 &pProjectionMatrix)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "bool \fBdebug\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBrenderSelf\fP (\fBWorld\fP *pWorld, \fBGameObject\fP *pGameObject, \fBAbstractMaterial\fP *pMaterial, const glm::mat4 &pModelMatrix, const glm::mat4 &pViewMatrix, const glm::mat4 &pProjectionMatrix)"
.br
.ti -1c
.RI "void \fBrenderChildren\fP (\fBWorld\fP *pWorld, \fBGameObject\fP *pGameObject, \fBAbstractMaterial\fP *pMaterial, const glm::mat4 &pModelMatrix, const glm::mat4 &pViewMatrix, const glm::mat4 &pProjectionMatrix, bool pRecursive)"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBRenderer\fP implements a default single pass forward renderer\&. 
.PP
Definition at line 16 of file Renderer\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Renderer::Renderer ()"

.PP
Definition at line 8 of file Renderer\&.cpp\&.
.SS "Renderer::~Renderer ()\fC [virtual]\fP"

.PP
Definition at line 31 of file Renderer\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void Renderer::render (\fBWorld\fP * pWorld)"
Convenience method to render whole world, visits each gameobject in the world recursively, using each gameobject's mesh & material, and the world's main camera\&. 
.PP
Definition at line 39 of file Renderer\&.cpp\&.
.SS "void Renderer::render (\fBWorld\fP * pWorld, \fBGameObject\fP * pGameObject, \fBAbstractMaterial\fP * pMaterial, \fBCamera\fP * pCamera, bool pRecursive)"
Renders a specific \fBGameObject\fP in the world using a specific camera\&. Convenience method for calling render (world, gameobject, material, modelmatrix, viewmatrix, projectionmatrix, recursive)
.PP
\fBParameters:\fP
.RS 4
\fIpWorld\fP the world the mesh is a part of, can be used to retrieve lighting information 
.br
\fIpGameObject\fP the gameobject to render, will use the this gameobject's world transform for the model matrix 
.br
\fIpMaterial\fP the material to use, is passed on to render (world, gameobject, material, modelmatrix, viewmatrix, projectionmatrix, recursive) 
.br
\fIpCamera\fP used for the view and perspective matrix 
.br
\fIpRecursive\fP render everything recursively 
.RE
.PP

.PP
Definition at line 43 of file Renderer\&.cpp\&.
.SS "void Renderer::render (\fBWorld\fP * pWorld, \fBGameObject\fP * pGameObject, \fBAbstractMaterial\fP * pMaterial, const glm::mat4 & pModelMatrix, const glm::mat4 & pViewMatrix, const glm::mat4 & pProjectionMatrix, bool pRecursive)"
Renders a specific game object in the world by calling: renderSelf renderChildren
.PP
\fBParameters:\fP
.RS 4
\fIpWorld\fP the world the gameobject is a part of, can be used to retrieve lighting information 
.br
\fIpGameObject\fP the gameobject to render 
.br
\fIpMaterial\fP the material to use, if NULL, the pGameObject->getMaterial() will be used, if NOT null it overrides the material for each and every gameobject 
.br
\fIpModelMatrix\fP the world transform of the model 
.br
\fIpViewMatrix\fP the view matrix of the camera 
.br
\fIpProjectionMatrix\fP the projectionmatrix of the camera 
.br
\fIpRecursive\fP render everything recursively 
.RE
.PP

.PP
Definition at line 48 of file Renderer\&.cpp\&.
.SS "void Renderer::render (\fBWorld\fP * pWorld, \fBMesh\fP * pMesh, \fBAbstractMaterial\fP * pMaterial, const glm::mat4 & pModelMatrix, const glm::mat4 & pViewMatrix, const glm::mat4 & pProjectionMatrix)"
Renders a specific mesh in the world\&.
.PP
\fBParameters:\fP
.RS 4
\fIpWorld\fP the world the mesh is a part of, can be used to retrieve lighting information 
.br
\fIpMesh\fP the mesh to render 
.br
\fIpMaterial\fP the material to use, CANNOT be NULL !! 
.br
\fIpModelMatrix\fP the world transform of the model 
.br
\fIpViewMatrix\fP the view matrix of the camera 
.br
\fIpProjectionMatrix\fP the projectionmatrix of the camera 
.RE
.PP

.PP
Definition at line 70 of file Renderer\&.cpp\&.
.SS "void Renderer::renderChildren (\fBWorld\fP * pWorld, \fBGameObject\fP * pGameObject, \fBAbstractMaterial\fP * pMaterial, const glm::mat4 & pModelMatrix, const glm::mat4 & pViewMatrix, const glm::mat4 & pProjectionMatrix, bool pRecursive)\fC [protected]\fP"

.PP
Definition at line 58 of file Renderer\&.cpp\&.
.SS "void Renderer::renderMeshDebugInfo (\fBMesh\fP * pMesh, const glm::mat4 & pModelMatrix, const glm::mat4 & pViewMatrix, const glm::mat4 & pProjectionMatrix)"
Helper method to render debug info for a mesh 
.PP
Definition at line 74 of file Renderer\&.cpp\&.
.SS "void Renderer::renderSelf (\fBWorld\fP * pWorld, \fBGameObject\fP * pGameObject, \fBAbstractMaterial\fP * pMaterial, const glm::mat4 & pModelMatrix, const glm::mat4 & pViewMatrix, const glm::mat4 & pProjectionMatrix)\fC [protected]\fP"
Renders a specific game object in the world\&.
.PP
\fBParameters:\fP
.RS 4
\fIpWorld\fP the world the gameobject is a part of, can be used to retrieve lighting information 
.br
\fIpGameObject\fP the gameobject to render 
.br
\fIpMaterial\fP the material to use, CANNOT BE NULL 
.br
\fIpModelMatrix\fP the world transform of the model 
.br
\fIpViewMatrix\fP the view matrix of the camera 
.br
\fIpProjectionMatrix\fP the projectionmatrix of the camera 
.RE
.PP

.PP
Definition at line 53 of file Renderer\&.cpp\&.
.SS "void Renderer::setClearColor (GLbyte pR, GLbyte pG, GLbyte pB)"
Utility call 
.PP
Definition at line 35 of file Renderer\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "bool Renderer::debug"

.PP
Definition at line 22 of file Renderer\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MGE from the source code\&.
